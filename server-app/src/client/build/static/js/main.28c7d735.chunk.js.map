{"version":3,"sources":["Item.jsx","ItemsList.jsx","SelectedItems.js","App.jsx","reportWebVitals.js","index.js"],"names":["Item","item","updateItem","type","checked","id","name","onChange","for","ItemsList","items","console","log","filteredItems","filter","map","index","SelectedItems","itemsSelected","dotenv","config","App","props","useState","setItems","process","useEffect","axios","get","then","response","data","parsedData","itemName","prevState","newItem","length","className","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAwBeA,MAtBf,YAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAGpB,OACE,gCACE,uBACEC,KAAK,WACLC,QAASH,EAAKG,QACdC,GAAIJ,EAAKK,KACTA,KAAML,EAAKK,KACXC,SATe,kBAAML,EAAWD,EAAKK,SAWvC,uBAAOE,IAAKP,EAAKK,KAAjB,SAAwBL,EAAKK,WCkBpBG,MA3Bf,YAAiD,IAA5BC,EAA2B,EAA3BA,MAAOP,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,WAChCS,QAAQC,IAAIF,GACZC,QAAQC,IAAIT,GAEZ,IAAMU,EAAgBH,EAAMI,QAAO,SAACb,GAAD,OAAUA,EAAKE,OAASA,KAG3D,OAFAQ,QAAQC,IAAIC,GAGV,gCACGV,EADH,QAEE,6BACGU,EAAcE,KAAI,SAACd,EAAMe,GAAP,OACjB,8BACE,cAAC,EAAD,CAAMf,KAAMA,EAAMC,WAAYA,KADtBC,EAAO,IAAMa,YCClBC,MAhBf,YAAmC,IAC3BC,EAD0B,EAATR,MACKI,QAAO,SAAAb,GAAI,OAAqB,IAAjBA,EAAKG,WAEhD,OACE,6BACEc,EAAcH,KAAI,SAAAd,GAAI,OAAI,6BAAKA,EAAKK,aCG1Ca,IAAOC,SAgGQC,MAtFf,SAAaC,GAEX,MAA0BC,mBAAS,IAAnC,mBAAOb,EAAP,KAAcc,EAAd,KAG2B,UAFAC,wBAEA,qBAE3BC,qBAAU,WACRC,IACGC,IAAI,2BAEJC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtBpB,QAAQC,IAAImB,GAEZ,IAAMC,EAAaD,EAAKhB,KAAI,SAACd,GAAD,mBAAC,eAAeA,GAAhB,IAAsBG,SAAS,OAG3DoB,EAASQ,QAEZ,IAEH,IAAM9B,EAAa,SAAC+B,GAClBtB,QAAQC,IAAI,kBAAmBqB,GAE/BT,GAAS,SAACU,GACR,OAAOA,EAAUnB,KAAI,SAACd,GAIpB,GAHAU,QAAQC,IAAIX,GAGRgC,IAAahC,EAAKK,KAAM,CAC1BK,QAAQC,IAAI,gBAAiBX,GAG7B,IAAMkC,EAAU,CACd7B,KAAML,EAAKK,KACXH,KAAMF,EAAKE,KACXC,SAAUH,EAAKG,SAIjB,OADAO,QAAQC,IAAI,gBAAiBuB,GACtBA,EAIT,OAAO,eAAKlC,UAQlB,OAHAU,QAAQC,IAAI,sBAAuBF,GAG9BA,EAAM0B,OAIP,eAAC,IAAD,WACE,sBAAKC,UAAU,MAAf,UACE,kDACA,8BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,8BAEF,8BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,sBAEF,8BACE,cAAC,IAAD,CAAMA,GAAG,YAAT,6BAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAAC,EAAD,CAAW7B,MAAOA,EAAOP,KAAK,QAAQD,WAAYA,MAEpD,cAAC,IAAD,CAAOqC,KAAK,aAAZ,SACE,cAAC,EAAD,CAAW7B,MAAOA,EAAOP,KAAK,YAAYD,WAAYA,MAExD,cAAC,IAAD,CAAOqC,KAAK,IAAZ,SACE,cAAC,EAAD,CAAe7B,MAAOA,YAxBvB,2CC9DI8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.28c7d735.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nfunction Item({ item, updateItem }) {\r\n  const handleChange = () => updateItem(item.name);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={item.checked}\r\n        id={item.name}\r\n        name={item.name}\r\n        onChange={handleChange}\r\n      />\r\n      <label for={item.name}>{item.name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  updateItem: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Item;\r\n","import PropTypes from \"prop-types\";\r\n\r\n// src imports\r\nimport Item from \"./Item\";\r\n\r\nfunction ItemsList({ items, type, updateItem }) {\r\n  console.log(items);\r\n  console.log(type);\r\n\r\n  const filteredItems = items.filter((item) => item.type === type);\r\n  console.log(filteredItems);\r\n\r\n  return (\r\n    <div>\r\n      {type} List\r\n      <ul>\r\n        {filteredItems.map((item, index) => (\r\n          <div key={type + \"-\" + index}>\r\n            <Item item={item} updateItem={updateItem} />\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nItemsList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  updateItem: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ItemsList;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction SelectedItems({ items }) {\r\n  const itemsSelected = items.filter(item => item.checked === true);\r\n\r\n  return (\r\n    <ul>\r\n     {itemsSelected.map(item => <li>{item.name}</li>)}\r\n    </ul>\r\n  )\r\n\r\n}\r\n\r\nSelectedItems.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\n\r\nexport default SelectedItems;","import \"./App.css\";\r\nimport React, { Component } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport dotenv from \"dotenv\"\r\n\r\n// Source code imports\r\nimport ItemsList from \"./ItemsList\";\r\nimport SelectedItems from \"./SelectedItems\";\r\ndotenv.config();\r\n\r\n\r\n\r\n// Our raw data. In a real app we might get this via an API call instead of it being hardcoded.\r\nconst TYPE_NAMES = {\r\n  fruits: \"fruit\",\r\n  vegetables: \"vegetable\",\r\n};\r\n\r\nfunction App(props) {\r\n  // create the react component state we'll use to store our data\r\n  const [items, setItems] = useState([]);\r\n  const REACT_APP_API_HOST = process.env.REACT_APP_API_HOST;\r\n\r\nconst API_GROCERY_ITEMS_ROUTE = `${REACT_APP_API_HOST}/v1/grocery-items`;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"API_GROCERY_ITEMS_ROUTE\")\r\n      // handle success\r\n      .then((response) => {\r\n        const data = response.data;\r\n        console.log(data);\r\n\r\n        const parsedData = data.map((item) => ({ ...item, checked: false }));\r\n\r\n        // set our react state w/data from the server!\r\n        setItems(parsedData);\r\n      });\r\n  }, []);\r\n\r\n  const updateItem = (itemName) => {\r\n    console.log(\"updateItem for \", itemName);\r\n    // Go thru all items; change the desired one; return a new array which has our updated item and all the other items.\r\n    setItems((prevState) => {\r\n      return prevState.map((item) => {\r\n        console.log(item);\r\n\r\n        // If it's the desired item, flip the value of `item.checked`\r\n        if (itemName === item.name) {\r\n          console.log(\"desired item \", item);\r\n\r\n          // This could also be done as `return { ...item, checked: !item.checked }`\r\n          const newItem = {\r\n            name: item.name,\r\n            type: item.type,\r\n            checked: !item.checked,\r\n          };\r\n\r\n          console.log(\"updated item \", newItem);\r\n          return newItem;\r\n        }\r\n\r\n        // If it's not the desired item, return it unchanged\r\n        return { ...item }; // IMPORTANT: Object destructuring like this creates a **new** object w/the same values\r\n      });\r\n    });\r\n  };\r\n\r\n  console.log(\"App.state.items is \", items);\r\n\r\n  // Data being retrieved from server\r\n  if (!items.length) {\r\n    return <div>Loading</div>;\r\n  } else {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <h1>Grocery List App</h1>\r\n          <div>\r\n            <Link to=\"/\">Selected Items</Link>\r\n          </div>\r\n          <div>\r\n            <Link to=\"fruit\">Fruits</Link>\r\n          </div>\r\n          <div>\r\n            <Link to=\"vegetable\">Vegetables</Link>\r\n          </div>\r\n        </div>\r\n        <Switch>\r\n          <Route path=\"/fruit\">\r\n            <ItemsList items={items} type=\"fruit\" updateItem={updateItem} />\r\n          </Route>\r\n          <Route path=\"/vegetable\">\r\n            <ItemsList items={items} type=\"vegetable\" updateItem={updateItem} />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <SelectedItems items={items} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}